#!/bin/sh
#
# This file is part of sp-error-visualizer
#
# Copyright (C) 2007 Nokia Corporation.
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

# A simple start/stop initscript for the sp-error-visualizer tool 
# with the default syslog matching rule configuration

if test -f /etc/default/sp-error-visualizer; then
	    . /etc/default/sp-error-visualizer
else
	echo "No default configuration for error visualizer."
	echo "*ALL* syslog events will be displayed!"
fi

PIDFILE="/var/run/sp-error-visualizer.pid"

case "$1" in
  start)
  	if test -f /var/run/sp-error-visualizer.pid; then
		echo "sp-error-visualizer already running."
	else
        	echo "Setting up the graphical display of errors"

		if [ -e /dev/log ]; then
		echo "Syslog daemon is present, piping its output"

# This is still a bit messy. We should check for alternative locations.

		tail -f /var/ftd-log/syslog | run-standalone.sh /usr/bin/sp-error-visualizer $VISUALIZER_OPTS &
		else
			echo "No syslog file, using syslog socket"
			run-standalone.sh sp-error-visualizer -s $VISUALIZER_OPTS &
			# a flag to indicate that syslog socket was
			# created by us

			touch /var/run/sp-error-visualizer-syslog-sock
		fi
		# Hmm. Do we actually _need_ to store the PID, or would the
		# pidof work sufficiently well later too?
		# 
		# As we start the error-visualizer in an async fashion,
		# pidof might initially return an empty PID. On the other
		# hand, waiting always a fixed amount of time is ugly,
		# so let's check first whether we have a valid value and
		# try again once if necessary.

		VISUALIZER_PID=$(pidof -s sp-error-visualizer)

		if [ "$VISUALIZER_PID" -lt 2 ]; then
		    sleep 1
		    VISUALIZER_PID=$(pidof -s sp-error-visualizer)
		fi

		if [ "$VISUALIZER_PID" -lt 2 ]; then
		    echo "Could not start sp-error-visualizer!"
		else
		    echo $VISUALIZER_PID > /var/run/sp-error-visualizer.pid
		fi

	fi
        ;;
  stop)
        echo "Shutting down the graphical display of errors"
	    if [ -e /var/run/sp-error-visualizer.pid ]; then
		kill $(cat /var/run/sp-error-visualizer.pid)
		rm /var/run/sp-error-visualizer.pid
		echo "sp-error-visualizer stopped."

		if [ -e /var/run/sp-error-visualizer-syslog-sock ]; then
		    rm /dev/log
		    rm /var/run/sp-error-visualizer-syslog-sock
		fi
	    else
		echo "The sp-error-visualizer was not running."
	    fi
        ;;
  restart)
	echo "Restarting the sp-error-visualizer"
	/etc/init.d/sp-error-visualizer stop
	/etc/init.d/sp-error-visualizer start
	;;
  *)
        N=/etc/init.d/sp-error-visualizer
        echo "Usage: $N {start|stop|restart)" >&2
        exit 1
        ;;
esac
